door.c:	if (map[ray->map_y][ray->map_x] == DOOR
door.c:		|| map[ray->map_y][ray->map_x] == DOPEN)
door.c:		printf("Char when: [%c]\n", map[ray->map_y][ray->map_x]);
door.c:		ray->io_door = 1;
door.c:			ray->door[X] = ray->map_x;
door.c:			ray->door[Y] = ray->map_y;
door.c:	door_x = mlx->ray->door[X];
door.c:	door_y = mlx->ray->door[Y];
door.c:	if (mlx->ray->door[X] == -1 || mlx->ray->door[Y] == -1)
draw.c:	mlx->ray->door[X] = -1;
draw.c:	mlx->ray->door[Y] = -1;
draw.c:	printf("%d\n", mlx->ray->door[X]);
draw.c:	printf("%d\n", mlx->ray->door[Y]);
draw.c:	if (mlx->map->map[mlx->ray->map_y][mlx->ray->map_x] != '1')
draw.c:		printf("[%c]\n", mlx->map->map[mlx->ray->map_y][mlx->ray->map_x]);
raycast.c:	if (ray->ray_dir_x < 0)
raycast.c:		ray->step_x = -1;
raycast.c:		ray->side_dist_x = (p->pos_x - ray->map_x) * ray->delta_dis_x;
raycast.c:		ray->step_x = 1;
raycast.c:		ray->side_dist_x = (ray->map_x + 1.0 - p->pos_x) * ray->delta_dis_x;
raycast.c:	if (ray->ray_dir_y < 0)
raycast.c:		ray->step_y = -1;
raycast.c:		ray->side_dist_y = (p->pos_y - ray->map_y) * ray->delta_dis_y;
raycast.c:		ray->step_y = 1;
raycast.c:		ray->side_dist_y = (ray->map_y + 1.0 - p->pos_y) * ray->delta_dis_y;
raycast.c:	while (ray->coll == 0)
raycast.c:		if (ray->side_dist_x < ray->side_dist_y)
raycast.c:			ray->side_dist_x += ray->delta_dis_x;
raycast.c:			ray->map_x += ray->step_x;
raycast.c:			ray->side = 0;
raycast.c:			ray->side_dist_y += ray->delta_dis_y;
raycast.c:			ray->map_y += ray->step_y;
raycast.c:			ray->side = 1;
raycast.c:		if (map->map[ray->map_y][ray->map_x] == WALL
raycast.c:			|| map->map[ray->map_y][ray->map_x] == DOOR)
raycast.c:			ray->coll = 1;
raycast.c:	if (ray->side == 0)
raycast.c:		ray->perp_wall_dist = ray->side_dist_x - ray->delta_dis_x;
raycast.c:		ray->perp_wall_dist = ray->side_dist_y - ray->delta_dis_y;
raycast.c:	ray->ln_height = (int)(WIN_H / ray->perp_wall_dist);
raycast.c:	ray->d_start = -ray->ln_height / 2 + WIN_H / 2;
raycast.c:	if (ray->d_start < 0)
raycast.c:		ray->d_start = 0;
raycast.c:	ray->d_end = ray->ln_height / 2 + WIN_H / 2;
raycast.c:	if (ray->d_end >= WIN_H)
raycast.c:		ray->d_end = WIN_H - 1;
raycast.c:	tex = &mlx->tex[ray->text_id];
raycast.c:		if (y < ray->d_start)
raycast.c:		if (y >= ray->d_start && y <= ray->d_end)
raycast.c:			ray->tex_pos += ray->s_dis;
raycast.c:			text_y = (int)ray->tex_pos & (tex->th - 1);
raycast.c:			c = pixel_color(tex->img, ray->text_x, text_y);
raycast.c:		if (y > ray->d_end)
